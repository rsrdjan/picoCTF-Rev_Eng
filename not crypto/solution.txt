not-crypto is a stripped binary, meaning that I have to calculate main() address and work from that
point onwards. But first, I like to do static analysis to see if I can spare myself of assembler
listings and try to analyze the structure and the flow through decompiled pseudocode. Time for Ghidra!

Function FUN_00101070 seems interesting since after all these mambo-jumbo xoring and whatnot, it has 
memcmp() call on line 386 and that is usually sign of checking against hard-coded value (our flag). 
Trying to avoid going through pain of code analysis (it is a long function), let's do some dynamic instead.

My favourite tool gef (gdb with enhanced features) comes handy:

gdb -q not-crypto 
GEF for linux ready, type `gef' to start, `gef config' to configure
89 commands loaded and 5 functions added for GDB 13.2 in 0.00ms using Python engine 3.11
Reading symbols from not-crypto...
(No debugging symbols found in not-crypto)
gef➤  info files
Symbols from "/home/rsrdjan/Downloads/not-crypto".
Local exec file:
	`/home/rsrdjan/Downloads/not-crypto', file type elf64-x86-64.
	Entry point: 0x1c70
	0x0000000000000318 - 0x0000000000000334 is .interp
	0x0000000000000338 - 0x0000000000000378 is .note.gnu.property
	0x0000000000000378 - 0x000000000000039c is .note.gnu.build-id
	0x000000000000039c - 0x00000000000003bc is .note.ABI-tag
	0x00000000000003c0 - 0x00000000000003dc is .gnu.hash
	0x00000000000003e0 - 0x00000000000004e8 is .dynsym
	0x00000000000004e8 - 0x0000000000000598 is .dynstr
	0x0000000000000598 - 0x00000000000005ae is .gnu.version
	0x00000000000005b0 - 0x00000000000005e0 is .gnu.version_r
	0x00000000000005e0 - 0x00000000000006b8 is .rela.dyn
	0x00000000000006b8 - 0x0000000000000718 is .rela.plt
	0x0000000000001000 - 0x000000000000101b is .init
	0x0000000000001020 - 0x0000000000001070 is .plt
	0x0000000000001070 - 0x0000000000001de5 is .text
	0x0000000000001de8 - 0x0000000000001df5 is .fini
	0x0000000000002000 - 0x0000000000002200 is .rodata
	0x0000000000002200 - 0x0000000000002234 is .eh_frame_hdr
	0x0000000000002238 - 0x0000000000002340 is .eh_frame
	0x0000000000003de0 - 0x0000000000003de8 is .init_array
	0x0000000000003de8 - 0x0000000000003df0 is .fini_array
	0x0000000000003df0 - 0x0000000000003fd0 is .dynamic
	0x0000000000003fd0 - 0x0000000000004000 is .got
	0x0000000000004000 - 0x0000000000004038 is .got.plt
	0x0000000000004038 - 0x0000000000004048 is .data
	0x0000000000004048 - 0x0000000000004050 is .bss
gef➤  

Now that we have entry point offset (0x1c70), we have to tell our debugger to stop with the
execution when shared library load occurs:

gef> set stop-on-solib-events 1
gef> run
Starting program: /home/rsrdjan/Downloads/not-crypto 
Stopped due to shared library event (no libraries added or removed)
...

Let's examine process memory space and mapped regions:

gef➤  info proc map
process 234445
Mapped address spaces:

          Start Addr           End Addr       Size     Offset  Perms  objfile
      0x555555554000     0x555555555000     0x1000        0x0  r--p   /home/rsrdjan/Downloads/not-crypto
      0x555555555000     0x555555556000     0x1000     0x1000  r-xp   /home/rsrdjan/Downloads/not-crypto
      0x555555556000     0x555555557000     0x1000     0x2000  r--p   /home/rsrdjan/Downloads/not-crypto
      0x555555557000     0x555555559000     0x2000     0x2000  rw-p   /home/rsrdjan/Downloads/not-crypto
      0x7ffff7fc3000     0x7ffff7fc5000     0x2000        0x0  rw-p   
      0x7ffff7fc5000     0x7ffff7fc9000     0x4000        0x0  r--p   [vvar]
      0x7ffff7fc9000     0x7ffff7fcb000     0x2000        0x0  r-xp   [vdso]
      0x7ffff7fcb000     0x7ffff7fcc000     0x1000        0x0  r--p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
      0x7ffff7fcc000     0x7ffff7ff1000    0x25000     0x1000  r-xp   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
      0x7ffff7ff1000     0x7ffff7ffb000     0xa000    0x26000  r--p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
      0x7ffff7ffb000     0x7ffff7fff000     0x4000    0x30000  rw-p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
      0x7ffffffde000     0x7ffffffff000    0x21000        0x0  rw-p   [stack]
gef➤  

Now that we have both entry point offset and start address, we can calculate entry point address of a
running program (0x555555554000 + 0x1c70) and set a breakpoint:

gef➤  b *(0x555555554000 + 0x1c70)
Breakpoint 1 at 0x555555555c70

We need to continue with the execution twice to reach our breakpoint:

[#0] Id 1, Name: "not-crypto", stopped 0x555555555c70 in ?? (), reason: BREAKPOINT

How far are we from main()? We can check for the next 32 instructions from our breakpoint:

gef➤  x/32i 0x555555555c70
=> 0x555555555c70:	endbr64
   0x555555555c74:	xor    ebp,ebp
   0x555555555c76:	mov    r9,rdx
   0x555555555c79:	pop    rsi
   0x555555555c7a:	mov    rdx,rsp
   0x555555555c7d:	and    rsp,0xfffffffffffffff0
   0x555555555c81:	push   rax
   0x555555555c82:	push   rsp
   0x555555555c83:	lea    r8,[rip+0x156]        # 0x555555555de0
   0x555555555c8a:	lea    rcx,[rip+0xdf]        # 0x555555555d70
   0x555555555c91:	lea    rdi,[rip+0xfffffffffffff3d8]        # 0x555555555070
   0x555555555c98:	call   QWORD PTR [rip+0x2342]        # 0x555555557fe0
   0x555555555c9e:	hlt
   0x555555555c9f:	nop

There's a call on 0x555555555c98 with previous instruction loading effective address to rdi register (0x555555555070).
That is our main() entry, so let's set a breakpoint there and continue with the execution:

gef➤  b *0x555555555070
Breakpoint 2 at 0x555555555070
gef➤  c
Continuing.

Breakpoint 2, 0x0000555555555070 in ?? ()

[#0] Id 1, Name: "not-crypto", stopped 0x555555555070 in ?? (), reason: BREAKPOINT
────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x555555555070 → push r15
[#1] 0x7ffff7dec6ca → __libc_start_call_main(main=0x555555555070, argc=0x1, argv=0x7fffffffde38)
[#2] 0x7ffff7dec785 → __libc_start_main_impl(main=0x555555555070, argc=0x1, argv=0x7fffffffde38, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffde28)
[#3] 0x555555555c9e → hlt 

Hit! If we analyze instructions, we can see that FUN_00101070 is, actually, our main(). Now, let's hunt for that memcmp() call.
We know that it's a long function so let's get next 300 instructions from our instruction pointer:

gef➤  x/300i $rip
=> 0x555555555070:	push   r15
   0x555555555072:	lea    rdi,[rip+0xf8f]        # 0x555555556008
   0x555555555079:	push   r14
   0x55555555507b:	push   r13
   0x55555555507d:	push   r12
   0x55555555507f:	push   rbp
   0x555555555080:	push   rbx
   0x555555555081:	sub    rsp,0x1d8
   0x555555555088:	mov    rax,QWORD PTR fs:0x28
   0x555555555091:	mov    QWORD PTR [rsp+0x1c8],rax
   0x555555555099:	xor    eax,eax
   0x55555555509b:	lea    rbx,[rsp+0xb0]
   0x5555555550a3:	call   0x555555555030 <puts@plt>
   0x5555555550a8:	vmovdqa xmm0,XMMWORD PTR [rip+0x10f0]        # 0x5555555561a0
   0x5555555550b0:	mov    rax,rbx
   0x5555555550b3:	mov    edi,0xffffff98
   0x5555555550b8:	mov    esi,0x32
   0x5555555550bd:	mov    ecx,0x6c
   0x5555555550c2:	mov    edx,0x1c
   0x5555555550c7:	vmovdqa XMMWORD PTR [rsp+0xb0],xmm0
   0x5555555550d0:	mov    r8d,0x4
   0x5555555550d6:	lea    r9,[rip+0xfc3]        # 0x5555555560a0
   0x5555555550dd:	lea    r10,[rip+0xf9c]        # 0x555555556080
   0x5555555550e4:	nop    DWORD PTR [rax+0x0]
   0x5555555550e8:	test   r8b,0x3
   0x5555555550ec:	jne    0x55555555511d
   0x5555555550ee:	movzx  esi,sil
   0x5555555550f2:	movzx  ecx,cl
   0x5555555550f5:	movzx  edx,dl
   0x5555555550f8:	movzx  edi,dil
   0x5555555550fc:	movzx  r11d,BYTE PTR [r9+rsi*1]
   0x555555555101:	movzx  esi,BYTE PTR [r9+rcx*1]
   0x555555555106:	movzx  ecx,BYTE PTR [r9+rdx*1]
   0x55555555510b:	movzx  edx,BYTE PTR [r9+rdi*1]
   0x555555555110:	mov    edi,r8d
   0x555555555113:	shr    edi,0x2
   0x555555555116:	xor    r11b,BYTE PTR [r10+rdi*1]
   0x55555555511a:	mov    edi,r11d
   0x55555555511d:	xor    dil,BYTE PTR [rax]
   0x555555555120:	add    r8d,0x1
   0x555555555124:	add    rax,0x4
   0x555555555128:	xor    sil,BYTE PTR [rax-0x3]
   0x55555555512c:	xor    cl,BYTE PTR [rax-0x2]
   0x55555555512f:	xor    dl,BYTE PTR [rax-0x1]
   0x555555555132:	mov    BYTE PTR [rax+0xc],dil
   0x555555555136:	mov    BYTE PTR [rax+0xd],sil
   0x55555555513a:	mov    BYTE PTR [rax+0xe],cl
   0x55555555513d:	mov    BYTE PTR [rax+0xf],dl
   0x555555555140:	cmp    r8d,0x2c
   0x555555555144:	jne    0x5555555550e8
   0x555555555146:	lea    rdi,[rsp+0x70]
   0x55555555514b:	mov    edx,0x40
   0x555555555150:	mov    esi,0x1
   0x555555555155:	mov    rax,QWORD PTR [rip+0x2e7c]        # 0x555555557fd8
   0x55555555515c:	vmovdqa xmm0,XMMWORD PTR [rip+0x104c]        # 0x5555555561b0
   0x555555555164:	mov    QWORD PTR [rsp+0x40],rdi
   0x555555555169:	add    rbx,0xa0
   0x555555555170:	vmovdqa XMMWORD PTR [rsp+0x160],xmm0
   0x555555555179:	mov    rcx,QWORD PTR [rax]
   0x55555555517c:	call   0x555555555040 <fread@plt>
   0x555555555181:	movzx  eax,BYTE PTR [rsp+0xb0]
   0x555555555189:	lea    rdi,[rip+0xf10]        # 0x5555555560a0
   0x555555555190:	vmovdqa xmm0,XMMWORD PTR [rip+0x1028]        # 0x5555555561c0
   0x555555555198:	vmovdqa XMMWORD PTR [rsp+0x180],xmm0
   0x5555555551a1:	vmovdqa xmm0,XMMWORD PTR [rip+0x1027]        # 0x5555555561d0
   0x5555555551a9:	mov    BYTE PTR [rsp+0x60],al
   0x5555555551ad:	movzx  eax,BYTE PTR [rsp+0xb1]
   0x5555555551b5:	vmovdqa XMMWORD PTR [rsp+0x190],xmm0
   0x5555555551be:	vmovdqa xmm0,XMMWORD PTR [rip+0x101a]        # 0x5555555561e0
   0x5555555551c6:	vmovdqa XMMWORD PTR [rsp+0x1a0],xmm0
   0x5555555551cf:	vmovdqa xmm0,XMMWORD PTR [rip+0x1019]        # 0x5555555561f0
   0x5555555551d7:	mov    BYTE PTR [rsp+0x61],al
   0x5555555551db:	movzx  eax,BYTE PTR [rsp+0xb2]
   0x5555555551e3:	vmovdqa XMMWORD PTR [rsp+0x1b0],xmm0
   0x5555555551ec:	mov    BYTE PTR [rsp+0x62],al
   0x5555555551f0:	movzx  eax,BYTE PTR [rsp+0xb3]
   0x5555555551f8:	mov    BYTE PTR [rsp+0x63],al
   0x5555555551fc:	movzx  eax,BYTE PTR [rsp+0xb4]
   0x555555555204:	mov    BYTE PTR [rsp+0x64],al
   0x555555555208:	movzx  eax,BYTE PTR [rsp+0xb5]
   0x555555555210:	mov    BYTE PTR [rsp+0x65],al
   0x555555555214:	movzx  eax,BYTE PTR [rsp+0xb6]
   0x55555555521c:	mov    BYTE PTR [rsp+0x66],al
   0x555555555220:	movzx  eax,BYTE PTR [rsp+0xb7]
   0x555555555228:	mov    BYTE PTR [rsp+0x67],al
   0x55555555522c:	movzx  eax,BYTE PTR [rsp+0xb8]
   0x555555555234:	mov    BYTE PTR [rsp+0x68],al
   0x555555555238:	movzx  eax,BYTE PTR [rsp+0xb9]
   0x555555555240:	mov    BYTE PTR [rsp+0x69],al
   0x555555555244:	movzx  eax,BYTE PTR [rsp+0xba]
   0x55555555524c:	mov    BYTE PTR [rsp+0x6a],al
   0x555555555250:	movzx  eax,BYTE PTR [rsp+0xbb]
   0x555555555258:	mov    BYTE PTR [rsp+0x6b],al
   0x55555555525c:	movzx  eax,BYTE PTR [rsp+0xbc]
   0x555555555264:	mov    BYTE PTR [rsp+0x6c],al
   0x555555555268:	movzx  eax,BYTE PTR [rsp+0xbd]
   0x555555555270:	mov    BYTE PTR [rsp+0x6d],al
   0x555555555274:	movzx  eax,BYTE PTR [rsp+0xbe]
   0x55555555527c:	mov    BYTE PTR [rsp+0x6e],al
   0x555555555280:	movzx  eax,BYTE PTR [rsp+0xbf]
   0x555555555288:	mov    BYTE PTR [rsp+0x6f],al
   0x55555555528c:	movzx  eax,BYTE PTR [rsp+0x150]
   0x555555555294:	mov    BYTE PTR [rsp+0x50],al
   0x555555555298:	movzx  eax,BYTE PTR [rsp+0x151]
   0x5555555552a0:	mov    BYTE PTR [rsp+0x51],al
   0x5555555552a4:	movzx  eax,BYTE PTR [rsp+0x152]
   0x5555555552ac:	mov    BYTE PTR [rsp+0x52],al
   0x5555555552b0:	movzx  eax,BYTE PTR [rsp+0x153]
   0x5555555552b8:	mov    BYTE PTR [rsp+0x53],al
   0x5555555552bc:	movzx  eax,BYTE PTR [rsp+0x154]
   0x5555555552c4:	mov    BYTE PTR [rsp+0x54],al
   0x5555555552c8:	movzx  eax,BYTE PTR [rsp+0x155]
   0x5555555552d0:	mov    BYTE PTR [rsp+0x55],al
   0x5555555552d4:	movzx  eax,BYTE PTR [rsp+0x156]
   0x5555555552dc:	mov    BYTE PTR [rsp+0x56],al
   0x5555555552e0:	movzx  eax,BYTE PTR [rsp+0x157]
   0x5555555552e8:	mov    BYTE PTR [rsp+0x57],al
   0x5555555552ec:	movzx  eax,BYTE PTR [rsp+0x158]
   0x5555555552f4:	mov    BYTE PTR [rsp+0x58],al
   0x5555555552f8:	movzx  eax,BYTE PTR [rsp+0x159]
   0x555555555300:	mov    BYTE PTR [rsp+0x59],al
   0x555555555304:	movzx  eax,BYTE PTR [rsp+0x15a]
   0x55555555530c:	mov    BYTE PTR [rsp+0x5a],al
   0x555555555310:	movzx  eax,BYTE PTR [rsp+0x15b]
   0x555555555318:	mov    BYTE PTR [rsp+0x5b],al
   0x55555555531c:	movzx  eax,BYTE PTR [rsp+0x15c]
   0x555555555324:	mov    QWORD PTR [rsp+0x38],rbx
   0x555555555329:	mov    BYTE PTR [rsp+0x5c],al
   0x55555555532d:	movzx  eax,BYTE PTR [rsp+0x15d]
   0x555555555335:	mov    BYTE PTR [rsp+0x5d],al
   0x555555555339:	movzx  eax,BYTE PTR [rsp+0x15e]
   0x555555555341:	mov    BYTE PTR [rsp+0x5e],al
   0x555555555345:	movzx  eax,BYTE PTR [rsp+0x15f]
   0x55555555534d:	mov    BYTE PTR [rsp+0x5f],al
   0x555555555351:	lea    rax,[rsp+0x180]
   0x555555555359:	mov    r12,rax
   0x55555555535c:	mov    QWORD PTR [rsp+0x48],rax
   0x555555555361:	lea    rax,[rsp+0x1c0]
   0x555555555369:	mov    QWORD PTR [rsp+0x20],r12
   0x55555555536e:	mov    QWORD PTR [rsp+0x30],rax
   0x555555555373:	mov    eax,0x10
   0x555555555378:	nop    DWORD PTR [rax+rax*1+0x0]
   0x555555555380:	cmp    eax,0x10
   0x555555555383:	je     0x555555555401
   0x555555555385:	mov    rbx,QWORD PTR [rsp+0x20]
   0x55555555538a:	movsxd rdx,eax
   0x55555555538d:	add    eax,0x1
   0x555555555390:	movzx  edx,BYTE PTR [rsp+rdx*1+0x170]
   0x555555555398:	xor    BYTE PTR [rbx],dl
   0x55555555539a:	add    rbx,0x1
   0x55555555539e:	mov    QWORD PTR [rsp+0x20],rbx
   0x5555555553a3:	cmp    QWORD PTR [rsp+0x30],rbx
   0x5555555553a8:	jne    0x555555555380
   0x5555555553aa:	mov    rsi,QWORD PTR [rsp+0x40]
   0x5555555553af:	mov    edx,0x40
   0x5555555553b4:	mov    rdi,QWORD PTR [rsp+0x48]
   0x5555555553b9:	call   0x555555555060 <memcmp@plt>
   0x5555555553be:	mov    r12d,eax
   0x5555555553c1:	test   eax,eax
...

And we got it at 0x5555555553b9! Set a breakpoint and continue:

gef➤  b *0x5555555553b9
Breakpoint 3 at 0x5555555553b9
gef➤  c
Continuing.
I heard you wanted to bargain for a flag... whatcha got?
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa    <== our input

Breakpoint 3, 0x00005555555553b9 in ?? ()

Ok, now that we hit memcmp(), let's try to dig our flag. Ghidra tells us that second parameter of
memcmp() is our hard-coded (actually calculated and stored) value against which it compares the
input. This is how it looks:

00101146 48 8d 7c        LEA        RDI=>local_198,[RSP + 0x70]
         24 70

Is address in rdi register pointer to our flag?

ef➤  hexdump byte --size 64 $rdi
0x00007fffffffdca0     70 69 63 6f 43 54 46 7b 63 30 6d 70 31 6c 33 72    picoCTF{c0mp1l3r
0x00007fffffffdcb0     5f 30 70 74 31 6d 31 7a 34 74 31 30 6e 5f 31 35    _0pt1m1z4t10n_15
0x00007fffffffdcc0     5f 70 75 72 33 5f 77 31 7a 34 72 64 72 79 5f 62    _pur3_w1z4rdry_b
0x00007fffffffdcd0     75 74 5f 6e 30 5f 70 72 30 62 6c 33 6d 3f 7d 0a    ut_n0_pr0bl3m?}.

Oh yeah. 

picoCTF{c0mp1l3r_0pt1m1z4t10n_15_pur3_w1z4rdry_but_n0_pr0bl3m?}
